"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[99743],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>s});var t=i(96540);const o={},d=t.createContext(o);function l(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(d.Provider,{value:n},e.children)}},76262:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"form-templates/features/conditions","title":"Conditions","description":"Conditions enable you to offer different options of form parts based on the input, alter the visibility of form parts or create dependencies.","source":"@site/versioned_docs/version-10.0/20-form-templates/30-features/10-conditions.md","sourceDirName":"20-form-templates/30-features","slug":"/form-templates/features/conditions","permalink":"/docs/10.0/form-templates/features/conditions","draft":false,"unlisted":false,"tags":[],"version":"10.0","sidebarPosition":10,"frontMatter":{"title":"Conditions","description":"Conditions enable you to offer different options of form parts based on the input, alter the visibility of form parts or create dependencies."},"sidebar":"tutorialSidebar","previous":{"title":"Features","permalink":"/docs/10.0/category/features"},"next":{"title":"Form Field Validation","permalink":"/docs/10.0/form-templates/features/formfieldsvalidations"}}');var o=i(74848),d=i(28453);const l={title:"Conditions",description:"Conditions enable you to offer different options of form parts based on the input, alter the visibility of form parts or create dependencies."},s="Conditions",r={},a=[{value:"Definition",id:"definition",level:2},{value:"Complex else state",id:"complex-else-state",level:3},{value:"Conditions on structural elements",id:"conditions-on-structural-elements",level:2},{value:"Conditions within a block",id:"conditions-within-a-block",level:2},{value:"Conditions within a field",id:"conditions-within-a-field",level:2},{value:"Special Condition Operators on Fields",id:"special-condition-operators-on-fields",level:3},{value:"General Operators:",id:"general-operators",level:4},{value:"Operator for field values of type string:",id:"operator-for-field-values-of-type-string",level:4},{value:"Exmaple: Use of Regexp Operator",id:"exmaple-use-of-regexp-operator",level:5},{value:"Operator for field values of type number:",id:"operator-for-field-values-of-type-number",level:4},{value:"Conditions with multiple states (<code>elseCallback</code>)",id:"conditions-with-multiple-states-elsecallback",level:2},{value:"Nested Conditions",id:"nested-conditions",level:2}];function c(e){const n={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"conditions",children:"Conditions"})}),"\n",(0,o.jsxs)(n.p,{children:["Control the visibility and validation of form elements by adding conditions. These conditions can control the visibility of structural form elements as there are pages, tabs and blocks and the behaviour of a form field.",(0,o.jsx)(n.br,{}),"\n","Therefore simply add the attribute ",(0,o.jsx)(n.code,{children:"data-hf-condition"})," to the navigation elements and the Form Controls or use the form control ",(0,o.jsx)(n.code,{children:"Condition"}),".\nEven the submission of the form can be controlled by adding a structural condition to the ",(0,o.jsx)(n.code,{children:"<form>"}),"-tag."]}),"\n",(0,o.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,o.jsxs)(n.p,{children:["The value of the ",(0,o.jsx)(n.code,{children:"data-hf-condition"})," must be a JSON string.",(0,o.jsx)(n.br,{}),"\n","The typescript representation of the condition object is defined below:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="Type definition" showLineNumbers',children:"interface IConditionExpression {\n    type: 'page' | 'tab' | 'block' | 'field' | 'kiosk' | 'stage' | 'pdf' | 'reachout' | 'cordova' | 'electron' | 'forWeb';\n    id?: string;\n    val?: boolean | number | string; // only used by type field\n    op?:\n        | 'equals'\n        | 'contains'\n        | 'doesnotcontain'\n        | 'startswith'\n        | 'doesnotstartwith'\n        | 'endswith'\n        | 'doesnotendwith'\n        | 'regexp'\n        | 'not'\n        | 'gt'\n        | 'gte'\n        | 'lt'\n        | 'lte'; // default: 'equals'; only used by type field\n    regexpOp?: string; // only used if op=regexp \n    cond?: IConditionExpression[]; // a nested condition\n    nestedOp?: 'and' | 'or'; // only used in nested conditions; default := and\n    fullfillMissingField?: boolean; // Fullfill condition if field is missing in form structure\n}\n\ninterface IElseCondition {\n    cond?: IConditionExpression[];\n    default?: boolean;\n    op?: 'and' | 'or';\n}\n\ninterface IConditionExpressionElseComplex {\n    readonly: IElseCondition;\n    disabled: IElseCondition;\n    invisible: IElseCondition;\n    optional: IElseCondition;\n}\n\ninterface ICondition {\n    cond: IConditionExpression[];\n    op?: 'and' | 'or'; // default: and\n    else?: 'invisible' | 'disabled' | 'readonly' | 'optional' | IConditionExpressionElseComplex;\n    elseCallback?: (executorId: string, conditionObject: ICondition) => string;\n    excludeFromValidation?: boolean; // default: false\n}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["A structural condition (el: ",(0,o.jsx)(n.code,{children:"page"}),", ",(0,o.jsx)(n.code,{children:"tab"})," or ",(0,o.jsx)(n.code,{children:"block"}),") is fullfilled when all its required fields are filled out and all fields are valid."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.code,{children:"field"})," condition is fullfilled when the op is ",(0,o.jsx)(n.code,{children:"equals"}),"(default) and the field has the value ",(0,o.jsx)(n.code,{children:"val"}),". A ",(0,o.jsx)(n.code,{children:"field"})," condition is fullfilled when the op is ",(0,o.jsx)(n.code,{children:"not"})," and the field does not have the same value as defined in ",(0,o.jsx)(n.code,{children:"val"}),". A ",(0,o.jsx)(n.code,{children:"field"})," condition is fullfilled when the op is ",(0,o.jsx)(n.code,{children:"contains"})," and the field contains the value that is defined in ",(0,o.jsx)(n.code,{children:"val"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.code,{children:"field"})," condition without property ",(0,o.jsx)(n.code,{children:"val"})," is fullfilled if the field has a non empty value."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["A platform condition like ",(0,o.jsx)(n.code,{children:"pdf"}),", ",(0,o.jsx)(n.code,{children:"reachout"}),", ",(0,o.jsx)(n.code,{children:"cordova"}),", ",(0,o.jsx)(n.code,{children:"electron"})," or ",(0,o.jsx)(n.code,{children:"forWeb"})," is fullfilled if the condition on this platform validates to true (the property ",(0,o.jsx)(n.code,{children:"id"})," should be omitted here). These conditions could be used to show/hide platform-specific features (eg. the ID-Scanner that works only on cordova) or to hide/show areas in a pdf that should not be hidden/visible on other platforms."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["A stage condition (",(0,o.jsx)(n.code,{children:"stage"}),") fullfills if the condition with the id of the stage (",(0,o.jsx)(n.code,{children:"eg: "}),'"id": "ST1"`) validates to true.']}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["A kiosk condition (",(0,o.jsx)(n.code,{children:"kiosk"}),") fullfills wheather the app is in AppKioskMode or not."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"else"})," is the state when the condition is not fullfilled. The default is ",(0,o.jsx)(n.code,{children:"invisible"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"invisible"})," structural element or control is hidden. Required fields are not counted as required."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"disabled"})," structural element or control is visible but disabled. Required fields are not counted as required."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"optional"})," structural element or control is visible and enabled. Required fields are not counted as required."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"readonly"})," structural element or control is visible and readonly. Required fields are not counted as required."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"elseCallback"})," is used to define a callback function which have to return one of the above else states as string."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"excludeFromValidation"})," prevents the validator from validating a condition again within the same condition validation. This should only be used in special cases where otherwise a condition loop will be the result. Don't use required fields within such a condition."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{title:"Note",type:"tip",children:(0,o.jsx)(n.p,{children:'Please mind the difference between "disabled" and "readonly", especially in case of structural elements. The status "readonly" preserves the navigability of the structural element ( i.e. "page", "tab") and offers a better readability than the status "disabled".'})}),"\n",(0,o.jsx)(n.admonition,{title:"Info",type:"info",children:(0,o.jsx)(n.p,{children:"FormControls with boolean values (CheckBox, RadioBox, Switch) \u200b\u200bmust have a default value in order to work properly as Condition field!"})}),"\n",(0,o.jsx)(n.admonition,{title:"Important",type:"warning",children:(0,o.jsx)(n.p,{children:'The option "disabled" is deprecated and only supported for backwards compatibility of versions lower than 7.3.0.'})}),"\n",(0,o.jsx)(n.h3,{id:"complex-else-state",children:"Complex else state"}),"\n",(0,o.jsx)(n.p,{children:"Else states can also be defined in the FormDefinition. All allowed else states can be used as keys with normal condition objects as values. Nested conditions can be used as well."}),"\n",(0,o.jsx)(n.p,{children:"If one of the conditions is fullfilled, this else state is used for the main condition. If none of them is fullfilled, a predefined default else state is used."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",metastring:"showLineNumbers",children:'<li\n    data-hf-title="Service Notes"\n    data-hf-condition=\'{\n        "cond": [{\n            "type": "stage",\n            "id": "S1",\n            "val": false\n        }],\n        "else": {\n            "readonly": {\n                "op": "and",\n                "cond": [{\n                    "type": "field",\n                    "id": "operation_id",\n                    "val": "1234"\n                }, {\n                    "cond": [{\n                        "type": "stage",\n                        "id": "S1",\n                        "val": true\n                    }, {\n                        "type": "stage",\n                        "id": "S3",\n                        "val": true\n                    }],\n                    "nestedOp": "or"\n                }]\n            },\n            "invisible": {\n                "default": true\n            }\n        }\n    }\'\n>\n    ...\n</li>\n'})}),"\n",(0,o.jsx)(n.h2,{id:"conditions-on-structural-elements",children:"Conditions on structural elements"}),"\n",(0,o.jsxs)(n.p,{children:["The attribute ",(0,o.jsx)(n.code,{children:"data-hf-condition"})," can be added to every HybridForms structural element like ",(0,o.jsx)(n.strong,{children:"page"}),", ",(0,o.jsx)(n.strong,{children:"tab"})," or ",(0,o.jsx)(n.strong,{children:"block"})," and on the ",(0,o.jsx)(n.strong,{children:"form"})," itself.",(0,o.jsx)(n.br,{}),"\n","Conditions defined in the ",(0,o.jsx)(n.code,{children:"form"})," tag are required for the approval of the form itself. Conditions on pages can be based on all structural elements as well as on particular fields."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",metastring:"showLineNumbers",children:'<form data-hf-condition=\'{ "cond": [ { "type" : "page", "id": "lastpage" } ] }\'>\n    \x3c!-- first level - pages --\x3e\n    <ol>\n        <li\n            data-hf-title="Controls"\n            data-hf-condition=\'{\n               "op" : "and",\n               "cond": [{\n                       "type" : "field",\n                       "id": "testradio",\n                       "val": "value1"\n                   }, {\n                       "type" : "field",\n                       "id": "testcheckbox",\n                       "val": "yes"\n                   }],\n               "else": "optional"\n           }\'\n        >\n            \x3c!-- second level - tabs --\x3e\n            <ol>\n                ...\n            </ol>\n        </li>\n        \x3c!-- nested condition on the last page --\x3e\n        <li\n            data-hf-title="Last Page"\n            id="lastPage"\n            data-hf-condition=\'{\n               "op": "or",\n               "cond": [{\n                   "type": "stage",\n                   "id": "ST2",\n                   "val": true\n               }, {\n                   "type": "stage",\n                   "id": "ST4",\n                   "val": true\n               }, {\n                   "cond": [{\n                       "type": "field",\n                       "id": "address_zip_code",\n                       "val": "8010"\n                   }, {\n                       "type": "field",\n                       "id": "address_city",\n                       "val": "Graz"\n                   }],\n                   "nestedOp": "or"\n               }],\n               "else": "invisible"\n           }\'\n        >\n            \x3c!-- second level - tabs --\x3e\n            <ol>\n                ...\n            </ol>\n        </li>\n    </ol>\n</form>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Conditions defined in the navigation elements can control the visibility or disable/enable editing of a page, a tab or a block.\nThe condition inside the ",(0,o.jsx)(n.code,{children:"<form>"}),'-tag is fulfilled if the required fields of the page "lastpage" are filled in, otherwise the App bar button "Submit" is disabled. Assure the page\'s ID is set and unique!']}),"\n",(0,o.jsx)(n.admonition,{title:"Info",type:"info",children:(0,o.jsxs)(n.p,{children:["You can only define ",(0,o.jsx)(n.strong,{children:"one"})," conditional state (",(0,o.jsx)(n.code,{children:"else"}),") per element but you can connect several conditions by one operator (",(0,o.jsx)(n.code,{children:'"op":"and"'})," / ",(0,o.jsx)(n.code,{children:'"op":"or"'}),")."]})}),"\n",(0,o.jsx)(n.h2,{id:"conditions-within-a-block",children:"Conditions within a block"}),"\n",(0,o.jsxs)(n.p,{children:["Within a block conditions use the control ",(0,o.jsx)(n.code,{children:"Condition"}),". This control can be set to HTML areas by using the ",(0,o.jsx)(n.code,{children:"<div/>"})," tag."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",metastring:"showLineNumbers",children:'<div id="tab-block#1">\n    <div\n        id="condition1"\n        data-hf-control="Condition"\n        data-hf-condition=\'{ "cond": [ { "type": "field", "id": "testradio1", "val": "yes" } ] }\'\n    >\n        <input id="text1" type="text" data-hf-control="TextField" />\n    </div>\n\n    <div\n        id="condition2"\n        data-hf-control="Condition"\n        data-hf-condition=\'{ "cond": [ { "type": "field", "id": "testradio1", "val": "no" } ] }\'\n    >\n        <input id="text1" type="text" data-hf-control="TextField" />\n    </div>\n</div>\n'})}),"\n",(0,o.jsx)(n.p,{children:'For further details on the control please refer to the corresponding entry in the chapter "Form controls".'}),"\n",(0,o.jsx)(n.h2,{id:"conditions-within-a-field",children:"Conditions within a field"}),"\n",(0,o.jsxs)(n.p,{children:["Just add the ",(0,o.jsx)(n.code,{children:"data-hf-condition"})," attribute to the field:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",metastring:"showLineNumbers",children:'<input\n    id="text1"\n    type="text"\n    data-hf-control="TextField"\n    data-hf-options="{\n        required: true\n    }"\n    data-hf-condition=\'{\n        "cond": [{\n            "type": "field",\n            "id": "testradio1",\n            "val": "yes"\n        }],\n        "else": "optional"\n    }\'\n/>\n'})}),"\n",(0,o.jsx)(n.p,{children:'In the example above the else state "optional" means that a required field looses the required status if the condition is not met, its required state depends on the defined condition. If the condition is fullfilled, the field is required. This else state makes only sense on controls that has the required property set to true in the data-hf-options attribute.'}),"\n",(0,o.jsx)(n.h3,{id:"special-condition-operators-on-fields",children:"Special Condition Operators on Fields"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",metastring:"showLineNumbers",children:'<input\n    id="textfield01"\n    type="text"\n    data-hf-control="TextField"\n    data-hf-options="{\n        label: \'String Cond Target\',\n        tooltip: \'Das ist ein Tooltip\',\n        onChanged: HFFormdefinition.Playground.doSomethingOnChange\n    }"\n/>\n\n<input\n    id="tab2-textfield01"\n    type="text"\n    data-hf-control="TextField"\n    data-hf-condition=\'{\n        "cond": [{\n            "type": "field",\n            "id": "textfield01",\n            "val": "foo",\n            "op": "not"\n        }],\n        "else": "readonly"\n    }\'\n    data-hf-options="{\n        label: \'Not &quot;foo&quot;\',\n        tooltip: \'This condition is fullfilled if the value is not &quot;foo&quot;\',\n        required: false\n    }"\n/>\n/>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In the example above there is the property ",(0,o.jsx)(n.code,{children:"op"})," defined on the ",(0,o.jsx)(n.code,{children:"cond"})," object. This ",(0,o.jsx)(n.code,{children:"op"})," property defines how the given ",(0,o.jsx)(n.code,{children:"val"})," property is evaluated. In the case of ",(0,o.jsx)(n.code,{children:'"op": "not"'}),' the condition is fullfilled if the field value is not "foo".\nThere are different options for the op value, default is ',(0,o.jsx)(n.code,{children:"equals"}),": A condition is fullfilled if the given ",(0,o.jsx)(n.code,{children:"val"})," value is equal to the field value."]}),"\n",(0,o.jsx)(n.h4,{id:"general-operators",children:"General Operators:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Operator"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"equals"})}),(0,o.jsxs)(n.td,{children:["A condition is fullfilled if the given ",(0,o.jsx)(n.code,{children:"val"})," value is equal to the field value. This is the default operation and does not have to be defined."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"not"})}),(0,o.jsxs)(n.td,{children:["A condition is fullfilled if the field value is not the defined value in the ",(0,o.jsx)(n.code,{children:"cond"})," object."]})]})]})]}),"\n",(0,o.jsx)(n.h4,{id:"operator-for-field-values-of-type-string",children:"Operator for field values of type string:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Operator"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"contains"})}),(0,o.jsx)(n.td,{children:"A condition is fullfilled if the defined value is contained in the field value."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"doesnotcontain"})}),(0,o.jsx)(n.td,{children:"A condition is fullfilled if the defined value is not contained in the field value."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"startswith"})}),(0,o.jsxs)(n.td,{children:["A condition is fullfilled if the field value starts with the defined value in the ",(0,o.jsx)(n.code,{children:"cond"})," object."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"doesnotstartwith"})}),(0,o.jsxs)(n.td,{children:["A condition is fullfilled if the field value does not start with the defined value in the ",(0,o.jsx)(n.code,{children:"cond"})," object."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"endswith"})}),(0,o.jsxs)(n.td,{children:["A condition is fullfilled if the field value ends with the defined value in the ",(0,o.jsx)(n.code,{children:"cond"})," object."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"doesnotendwith"})}),(0,o.jsxs)(n.td,{children:["A condition is fullfilled if the field value does not end with the defined value in the ",(0,o.jsx)(n.code,{children:"cond"})," object."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"regexp"})}),(0,o.jsxs)(n.td,{children:["A condition is fullfilled if the regexp defined in the ",(0,o.jsx)(n.code,{children:"val"}),"property returns true for the field value. To define the regexp you have to use the additional ",(0,o.jsx)(n.code,{children:"regexpOp"})," property in the ",(0,o.jsx)(n.code,{children:"cond"})," object. See the example below on how to use the regexp operator"]})]})]})]}),"\n",(0,o.jsx)(n.h5,{id:"exmaple-use-of-regexp-operator",children:"Exmaple: Use of Regexp Operator"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",metastring:"showLineNumbers",children:'<input\n    id="tab2-textfield2-4"\n    type="text"\n    data-hf-control="TextField"\n    data-hf-condition=\'{\n        "cond": [{\n            "type": "field",\n            "id": "textfield01",\n            "val": "foo",\n            "op": "regexp",\n            "regexpOp": "foo\\\\d{2}"\n        }],\n        "else": "readonly"\n    }\'\n    data-hf-options="{\n        label: \'regexp &quot;foo\\\\d{2}&quot;\',\n        tooltip: \'Condition ist erf\xfcllt, wenn der Text String &quot;foo&quot; und zwei Zahlen enth\xe4lt\',\n        required: false\n    }"\n/>\n'})}),"\n",(0,o.jsx)(n.h4,{id:"operator-for-field-values-of-type-number",children:"Operator for field values of type number:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Operator"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"gt"})}),(0,o.jsx)(n.td,{children:"A condition is fullfilled if field value is greater than the defined value."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"gte"})}),(0,o.jsx)(n.td,{children:"A condition is fullfilled if field value is greater than or equal to the defined value."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"lt"})}),(0,o.jsx)(n.td,{children:"A condition is fullfilled if field value is less than the defined value."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"lte"})}),(0,o.jsx)(n.td,{children:"A condition is fullfilled if field value is less than or equal to the defined value."})]})]})]}),"\n",(0,o.jsxs)(n.h2,{id:"conditions-with-multiple-states-elsecallback",children:["Conditions with multiple states (",(0,o.jsx)(n.code,{children:"elseCallback"}),")"]}),"\n",(0,o.jsx)(n.p,{children:'This function offers the possibility for different states of a structural element or control in line with "stages" in case of more than two possible values.'}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," This option is only an ",(0,o.jsx)(n.strong,{children:'"initial"'})," condition. The condition is not applied while editing!"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",metastring:"showLineNumbers",children:'<li\n    data-hf-title="Service Data"\n    data-hf-condition=\'{\n        "cond": [{\n            "type": "stage",\n            "id":"S1",\n            "val": true\n        }],\n        "elseCallback": "HFFormdefinition.DemoQAStagesHelpers.getElseStatePage"\n    }\'\n></li>\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:"export function getElseStatePage() {\n    let currStage = HybridForms.API.Stages.getFormStage();\n    // return 'readonly';\n    switch (currStage) {\n        case 'S3':\n            return 'readonly';\n        default:\n            return 'invisible';\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The Custom Code example (",(0,o.jsx)(n.code,{children:"getElseStatePage()"}),") defines the ",(0,o.jsx)(n.code,{children:"default"}),"- state (",(0,o.jsx)(n.code,{children:"else-invisible"}),') and further else states of the page "Service data" depending on the active stage.']}),"\n",(0,o.jsx)(n.h2,{id:"nested-conditions",children:"Nested Conditions"}),"\n",(0,o.jsx)(n.p,{children:"This function offers the possibility to nest conditions, to set up more complex conditions."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",metastring:"showLineNumbers",children:'<li\n    data-hf-title="Service Data"\n    data-hf-condition=\'{\n        "op": "or",\n        "cond": [{\n            "type": "stage",\n            "id": "ST1",\n            "val": true\n        }, {\n            "cond": [{\n                "type": "field",\n                "id": "address_zip_code"\n            }, {\n                "type": "field",\n                "id": "address_city"\n            }],\n            "nestedOp": "or"\n        }],\n        "else": "invisible"\n    }\'\n></li>\n'})}),"\n",(0,o.jsx)(n.p,{children:"In the example above the condition validates to true if the form is in stage 1 or one of the two defined fields has a value."})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);