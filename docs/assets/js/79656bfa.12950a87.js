"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6703],{26672:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>a,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"form-controls/checkbox","title":"CheckBox","description":"| Property     | Type    | How to use                                                 | Description                                                                                                                                                                 |","source":"@site/versioned_docs/version-9.1/form-controls/checkbox.md","sourceDirName":"form-controls","slug":"/form-controls/checkbox","permalink":"/docs/9.1/form-controls/checkbox","draft":false,"unlisted":false,"tags":[],"version":"9.1","frontMatter":{"title":"CheckBox"},"sidebar":"tutorialSidebar","previous":{"title":"ButtonControl","permalink":"/docs/9.1/form-controls/buttoncontrol"},"next":{"title":"ComboBox","permalink":"/docs/9.1/form-controls/combobox"}}');var s=n(74848),d=n(28453);const l={title:"CheckBox"},o="CheckBox",i={},c=[{value:"listOptions Object",id:"listoptions-object",level:2},{value:"Stored data",id:"stored-data",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"checkbox",children:"CheckBox"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",children:'<input id="repair_cover_glass_broken" \n    type="checkbox"\n    value="Cover glass broken"\n    data-win-control="HFWinJSCtrl.CheckBox" \n    data-win-options="{ \n        label: \'Cover glass broken\', \n        list: true, \n        defaultValue: true,\n        style: \'default | highlightChecked | toggleButton\',\n        toggle: {\n            defaultClass: \'hf-radio-red\', \n            checkedClass: \'highlight\'\n            }\n        }">\n'})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"How to use"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"defaultValue"}),(0,s.jsx)(t.td,{children:"Boolean"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"defaultValue: true"})}),(0,s.jsx)(t.td,{children:'Set the defaultValue to "true" to display the CheckBox as checked by default.'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"disabled"}),(0,s.jsx)(t.td,{children:"Boolean"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"disabled: true"})}),(0,s.jsx)(t.td,{children:'Set "true" whenever the checkbox should be disabled. The default value is false.'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"doNotCopy"}),(0,s.jsx)(t.td,{children:"Boolean"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"doNotCopy: true"})}),(0,s.jsx)(t.td,{children:'Set "true" whenever the field should get deleted if form is copied.'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"label"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"label: 'Cover glass broken'"})}),(0,s.jsx)(t.td,{children:"Define a label set next to the checkbox (optional)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"htmlLabel"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"htmlLabel: 'Cover glass <strong>broken</strong>'"})}),(0,s.jsx)(t.td,{children:"Define a label that allows html tags inside the text set next to the checkbox. If a label and a htmlLabel is set, the htmlLabel overwrites the label."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"list"}),(0,s.jsx)(t.td,{children:"Boolean"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"list: true"})}),(0,s.jsx)(t.td,{children:'Set "true" whenever the content should show up in the list on the dashboard.'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"listOptions"}),(0,s.jsx)(t.td,{children:"Object"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"#listoptions-object",children:(0,s.jsx)(t.code,{children:"listOptions: {...}"})})}),(0,s.jsxs)(t.td,{children:["Set additional options for controls with ",(0,s.jsx)(t.code,{children:"list"})," equals ",(0,s.jsx)(t.code,{children:"true"}),". E.g. set custom label for filter/sort/group dialogs or hide them complettely."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"persistent"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"persistent: 'user'"})}),(0,s.jsx)(t.td,{children:'The value "user" sets the initial value of the checkbox to the value of  the previous form item of the current user and overwrites any defaultValue.'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"required"}),(0,s.jsx)(t.td,{children:"Boolean"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"required: true"})}),(0,s.jsx)(t.td,{children:'Set "true" if the control has to be filled in.'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"style"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"`style: 'default"}),(0,s.jsx)(t.td,{children:"highlightChecked"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"toggle"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"toggle: {defaultClass: 'hf-radio-orange', checkedClass: 'highlight'}"})}),(0,s.jsxs)(t.td,{children:['Define up to two CSS classes applied to the container-div of the checkbox to emphasize the toggle-effect of the form control. At least the "defaultClass" has to be defined. ',(0,s.jsx)(t.strong,{children:"Note"}),": Use in case of ",(0,s.jsx)(t.code,{children:"style: 'toggleButton"})," to assign the background color, this option is ignored in case of the other two possibilities."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"tooltip"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"tooltip: 'Please indicate at least one cause of damage.'"})}),(0,s.jsx)(t.td,{children:"Write a comment to provide further information about the field. A question mark will then be shown within the label and with a click/tap on it, the information will occur."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"visiting"}),(0,s.jsx)(t.td,{children:"Boolean"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"visiting: true"})}),(0,s.jsx)(t.td,{children:'Set "true" whenever the form element should be marked as "visited" when the user has clicked or tapped at the form field.'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"onChanged"}),(0,s.jsx)(t.td,{children:"Function(value: boolean, hfValue: string)"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"onChanged: HFFormdefinition.Namespace.Method"})}),(0,s.jsx)(t.td,{children:"Call a pre-defined JS-method to do something when the status of the control changes"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"listoptions-object",children:"listOptions Object"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"How to use"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"dialogText"}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"dialogText: 'Display Text'"})}),(0,s.jsx)(t.td,{children:"Set custom label for filter/sort/group dialogs."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"dialogHide"}),(0,s.jsx)(t.td,{children:"Boolean"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"dialogHide: true"})}),(0,s.jsx)(t.td,{children:"Hide field from filter/sort/group dialogs."})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"stored-data",children:"Stored data"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",children:'<input id="repair_cover_glass_broken" type="checkbox"\n    data-win-control="HFWinJSCtrl.CheckBox" value="Cover glass broken"\n    data-win-options="{ label: \'Cover glass broken\', list: true, defaultValue: true }"\n>\n'})}),"\n",(0,s.jsx)(t.p,{children:"For each checked CheckBox inside your forms there are two value pairs of stored data:"}),"\n",(0,s.jsx)(t.p,{children:"First the information if the Checkbox is checked"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n    "id": "repair_cover_glass_broken",\n    "value": true\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"and for the defined value:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n    "id": "repair_cover_glass_broken_HFValue",\n    "value": "Cover glass broken"\n}\n'})})]})}function a(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var r=n(96540);const s={},d=r.createContext(s);function l(e){const t=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(d.Provider,{value:t},e.children)}}}]);