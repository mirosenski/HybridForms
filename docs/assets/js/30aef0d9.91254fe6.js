"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[15607],{13533:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/counter-dark-cca792c055e7792fe134ed8b19a8ba70.png"},15171:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"form-templates/features/counter","title":"Counter","description":"Counter, which you can find under System Settings, offers a quite flexible opportunity to define unique reference numbers for Forms. Users with a valid user license can request a unique counter value when using the HybridForms Client App online.","source":"@site/versioned_docs/version-10.1/20-form-templates/30-features/60-counter.md","sourceDirName":"20-form-templates/30-features","slug":"/form-templates/features/counter","permalink":"/docs/form-templates/features/counter","draft":false,"unlisted":false,"tags":[],"version":"10.1","sidebarPosition":60,"frontMatter":{"title":"Counter"},"sidebar":"tutorialSidebar","previous":{"title":"Translations","permalink":"/docs/form-templates/features/translation"},"next":{"title":"App Kiosk Mode","permalink":"/docs/form-templates/features/appkioskmode"}}');var o=t(74848),s=t(28453);const i={title:"Counter"},a="Counter",u={},c=[{value:"Usage",id:"usage",level:2},{value:"Error codes",id:"error-codes",level:3},{value:"FormDev",id:"formdev",level:2},{value:"Composition",id:"composition",level:3}];function l(e){const n={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"counter",children:"Counter"})}),"\n",(0,o.jsx)(n.p,{children:"Counter, which you can find under System Settings, offers a quite flexible opportunity to define unique reference numbers for Forms. Users with a valid user license can request a unique counter value when using the HybridForms Client App online."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.img,{alt:"Counter",src:t(74502).A+"#light-mode-only",width:"1250",height:"434"}),(0,o.jsx)(n.img,{alt:"Dark Counter",src:t(13533).A+"#dark-mode-only",width:"1252",height:"435"}),(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.em,{children:"Counter"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Counter ID:"})," Used in the Form Definition as reference."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Counter Data:"})," Freely selectable numerical values for counter start value, counter increment and digits to be used."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Optional Segments:"})," The options 1-6 must be defined in the Form Template (when used for the counter). With segments several counters can be started within a Form (eg. for each user, for each month or year\u2026)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Composition:"})," Defines the layout of the unique counter value. Can have options which are set through API request and static separators."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.p,{children:'To use a counter in the Form, "CustomCode" is needed. The App has to be online because the counter value has to be requested from server.'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="Response type of the request" showLineNumbers',children:"interface ICounterResponse {\n    counter: number;\n    formatedCounter: string;\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="Request body type" showLineNumbers',children:"interface ICounterOptions {\n    opt1?: string;\n    opt2?: string;\n    opt3?: string;\n    opt4?: string;\n    opt5?: string;\n    opt6?: string;\n}\n\ninterface ICounterData {\n    options: ICounterOptions;\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="Sample TypeScript code to request a counter" showLineNumbers',children:"if (!HybridForms.API.Platform.isOnline()) {\n    HybridForms.API.Messages.info('The App has to be online to get a counter value');\n    return Promise.resolve();\n}\n\nconst counterId = 'ExampleCounter';\nconst requestBody: ICounterData = {\n    options: {\n        opt1: 'exampleOption',\n    },\n};\n\nreturn HybridForms.API.XHR.request({\n    type: 'POST',\n    url: HybridForms.API.Activation.getUrl(`~/counter/${counterId}`),\n    headers: { 'Content-Type': 'application/json' },\n    data: JSON.stringify(requestBody),\n})\n    .then((response) => {\n        try {\n            let counter: ICounterResponse = JSON.parse(response.responseText);\n        } catch {\n            return Promise.reject();\n        }\n    })\n    .catch((error) => {\n        if (error.errorCode === 1200) {\n            // error messages here\n        }\n    });\n"})}),"\n",(0,o.jsx)(n.h3,{id:"error-codes",children:"Error codes"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"1200"}),": Counter not found. There is no counter with the given ID."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"1202"}),": Invalid counter request. The request body is not valid."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"1203"}),": Counter is not active. The counter must be activated first."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"formdev",children:"FormDev"}),"\n",(0,o.jsx)(n.p,{children:'In the formDev environment any counter used in the form can be formatted by a JSON-file.\nThe counter definition is then referenced by file name "counter.{CounterID}.json".'}),"\n",(0,o.jsx)(n.p,{children:"The file defines the digits count and composition of the counter:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:"showLineNumbers",children:'{\n    "digits": 3,\n    "formatGroupBefore2": "opt1",\n    "formatSepBefore2": " - ",\n    "formatGroupBefore1": "",\n    "formatSepBefore1": "",\n    "formatSepAfter1": "",\n    "formatGroupAfter1": "",\n    "formatSepAfter2": "",\n    "formatGroupAfter2": ""\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"In the formDev environment a random number with the given digits is generated. The default digits length equals four."}),"\n",(0,o.jsx)(n.h3,{id:"composition",children:"Composition"}),"\n",(0,o.jsx)(n.p,{children:"The composition can be used to format the counter value the same way as the server-side variant."}),"\n",(0,o.jsx)(n.p,{children:"{formatGroupBefore2}{formatSepBefore2}{formatGroupBefore1}{formatSepBefore1}{counter value}{formatSepAfter1}{formatSepBefore1}{formatSepAfter2}{formatGroupAfter2}"})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(96540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},74502:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/counter-38941251285f9e52b98a5763b086bc84.png"}}]);